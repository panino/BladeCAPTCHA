async function initCaptcha(e){if("manualHandling"===(e={mode:"manualHandling",onSuccess:null,onError:null,formSelector:"",inputName:null,statusSelector:"",verifyButtonSelector:"",submitButtonSelector:"",onStart:null,onEnd:null,onProgress:null,manualHandlingAutoStartOnLoad:!1,apiBaseUrl:"../php",...e}).mode){if(e.formSelector||e.submitButtonSelector)return Promise.reject(new Error("Manual mode must not use formSelector nor submitButtonSelector"));e.inputName&&console.warn("Manual mode does not use inputName for hidden token. This value will be ignored")}const n="autoFormIntegration"===e.mode&&e.formSelector?document.querySelector(e.formSelector):null;function r(e,n){if(!e)return null;if(n){let r=document.querySelector(e);return r&&r.closest&&r.closest("form")===n?r:n.querySelector(e)}return document.querySelector(e)}let t=null;"autoFormIntegration"===e.mode&&e.inputName&&n&&(t=n.querySelector(`[name="${e.inputName}"]`)||null);const o=r(e.statusSelector,n),a=r(e.verifyButtonSelector,n),c=r(e.submitButtonSelector,n),s=function(){const e=new Uint8Array(16);return crypto.getRandomValues(e),Array.from(e,e=>e.toString(16).padStart(2,"0")).join("")}();let i=!1,l={success:!1,error:!1,cancel:!1,load:!1},u=null;function d(n){if("function"==typeof e.onProgress&&u!==n)try{e.onProgress(n),u=n}catch(e){console.error("onProgress error",e)}}const f=new URL(".",import.meta.url).href.replace(/\/$/,""),m=n=>`${e.apiBaseUrl.replace(/\/$/,"")}/${n}`;function p(e,n=""){o&&(o.textContent=e,o.className=n)}function g(e){let n;if(e instanceof Error&&e.message)n=e.message;else if("string"==typeof e)n=e;else try{n=JSON.stringify(e)}catch{n=String(e)}return n.replace(/^\s*Error\s*:\s*/i,"")}function y(n,...r){if("onSuccess"===n){if(l.success)return;if(l.success=!0,"function"==typeof e.onSuccess)try{e.onSuccess(...r)}catch(e){console.error("onSuccess error",e)}}else if("onError"===n){if(l.error)return;if(l.error=!0,"function"==typeof e.onError)try{e.onError(...r)}catch(e){console.error("onError error",e)}}else if("onEnd"===n){if(l.cancel)return;if(l.cancel=!0,"function"==typeof e.onEnd)try{e.onEnd(...r)}catch(e){console.error("onEnd error",e)}}else if("onStart"===n){if(l.load)return;if(l.load=!0,"function"==typeof e.onStart)try{e.onStart(...r)}catch(e){console.error("onStart error",e)}}}async function h(e,n={}){const r=await fetch(e,n);if(!r.ok){let e;try{e=await r.json()}catch{e={message:await r.text().catch(()=>"")||`HTTP ${r.status}`}}throw new Error(e.message||`HTTP ${r.status}`)}return(r.headers.get("content-type")||"").includes("application/json")?await r.json():await r.text()}async function S(){if(p("Retrieving challenge...","loading"),i)return{success:!1,message:"Another process in progress"};i=!0,l={success:!1,error:!1,cancel:!1,load:!1},a&&(a.disabled=!0);try{const{challenge:r,difficulty:a}=await h(m("captcha.php"),{method:"POST",headers:{Accept:"application/json"},body:JSON.stringify({proceso:"GET_POW_CHALLENGE",claveCaptcha:s})});let c;p("Solving challenge...","loading");try{c=await function(n,r){return new Promise((t,a)=>{const c=new Worker(`${f}/workers/pow-worker.min.js`),s="function"==typeof e.onProgress,i=!!o;try{c.postMessage({challenge:n,difficulty:r,loguear:i,progress:s})}catch(e){return c.terminate(),a(e)}let l=!1;c.onmessage=e=>{const n=e.data||{};n.error?l||(l=!0,d(100),a(new Error(n.error)),c.terminate()):n.log?p(n.log,"info"):void 0===n.perc?void 0!==n.nonce&&(l||(l=!0,d(100),t(n.nonce),c.terminate())):d(Number(n.perc))},c.onerror=e=>{l||(l=!0,d(100),a(new Error("Worker error: "+(e?.message||e))),c.terminate())}})}(r,a)}catch(e){const n=`Error: ${g(e)}`;return p(n,"error"),y("onError",e),{success:!1,message:n}}p("Sending result...","loading");const i="VALIDATE_POW_CHALLENGE",l=await h(m("captcha.php"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({challenge:r,nonce:c,proceso:i,claveCaptcha:s})});if(p(l.message||"",l.success?"success":"error"),l.success&&n&&(t||(t=document.createElement("input"),t.name=e.inputName,t.type="hidden",n.appendChild(t)),t.value=l.token_validacion||""),l.success)return y("onSuccess",l.token_validacion||""),{success:!0,token:l.token_validacion||"",message:l.message||""};return y("onError",new Error(l.message||"Validation failed")),{success:!1,message:l.message||"Validation failed"}}catch(e){const n=`Error: ${g(e)}`;return p(n,"error"),y("onError",e),{success:!1,message:n}}finally{a&&(a.disabled=!1),i=!1}}async function w(){const{token:e,target_iterations:n}=await h(m("captcha.php"),{method:"POST",headers:{Accept:"application/json"},body:JSON.stringify({proceso:"getPerformanceChallenge",claveCaptcha:s})});try{await function(e=1e6){return new Promise((n,r)=>{const t=new Worker(`${f}/workers/benchmark-worker.min.js`);t.postMessage({iterations:e}),t.onmessage=e=>{e.data&&e.data.done?n():r(new Error("Benchmark did not finish correctly")),t.terminate()},t.onerror=e=>{r(e),t.terminate()}})}(n)}catch(e){console.log("Benchmark failed",e)}await h(m("captcha.php"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:e,proceso:"verifyPerformanceChallenge",claveCaptcha:s})})}async function E(e){if(e.preventDefault(),!i){y("onStart"),u=null,d(0);try{await w(),await S()}catch(e){p(g(e),"error"),y("onError",e)}finally{y("onEnd"),d(100),a&&(a.disabled=!1),i=!1}}}if("manualHandling"===e.mode)a||e.manualHandlingAutoStartOnLoad||console.warn('⚠️ "verifyButtonSelector" was not found and "manualHandlingAutoStartOnLoad" is disabled.\n   Verification cannot be initiated manually or automatically'),a&&e.manualHandlingAutoStartOnLoad&&console.info('ℹ️ "manualHandlingAutoStartOnLoad" is enabled and a verify button also exists.\n   This might be redundant: verification will run automatically when the page loads,\n   but the button will remain visible to run it again if desired'),document.addEventListener("DOMContentLoaded",async()=>{if(a&&a.addEventListener("click",async e=>{try{try{await E(e)}finally{y("onEnd")}}catch(e){p(g(e),"error"),y("onError",e)}}),e.manualHandlingAutoStartOnLoad)try{try{await E()}finally{y("onEnd")}}catch(e){p(g(e),"error"),y("onError",e)}});else if("autoFormIntegration"===e.mode){if(!c)return void console.warn("submitButtonSelector not found");if(!n)return void console.warn("formSelector not found");document.addEventListener("DOMContentLoaded",()=>{c.addEventListener("click",async e=>{if(e.preventDefault(),!c.disabled&&!i){c.disabled=!0,y("onStart"),u=null,d(0);try{try{y("onStart"),u=null,d(0),await w();const e=await S(),r=e.token||(t?t.value:""),o=!!r&&/^[a-f0-9]{32}$/i.test(r);if(e.success&&o)return void n.submit();const a=e.message||"Verification could not be completed";p(a,"error"),y("onError",new Error(a))}finally{y("onEnd")}}catch(e){p(`Error: ${g(e)}`,"error"),y("onError",e)}finally{i=!1,c.disabled=!1,d(100)}}})})}}export{initCaptcha};